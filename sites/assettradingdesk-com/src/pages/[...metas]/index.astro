---
import type { BaseProps } from "@/models/types/base";
import { SiteDefaults } from "../../defaults/SiteDefaults";
import { flowDefaults } from "../../flows/v1/defaults";
import Default from "../../flows/v1/Landing.astro";
import ThankyouDefault from "../../flows/v1/Thankyou.astro";
import PageLoader from "../../helpers/PageLoader";
import Log from "../../logger";

// Access locals directly from Astro.locals
const locals = Astro.locals;

let Page: any;

const props: Partial<BaseProps<any>> = {
  product: locals.product,
  trackingValues: locals.trackingValues,
  sageURL: locals.sageURL,
  testMode: locals.testMode,
  debugMode: locals.debugMode,
  variation: locals.urlVariation
    ? locals.urlVariation
    : locals.cvars?.variation,
  ad_id: locals.ad_id ? locals.ad_id : 0,
  lp_id: locals.lp_id ? locals.lp_id : 0,
  geo: locals.geo,
  pageType: locals.pageType,
};

// set default
if (!props.variation || props.variation == "") {
  props.variation = "v1";
}

const defaultPage = locals.pageType === "thankyou" ? ThankyouDefault : Default;

if (locals.cvars && locals.product) {
  try {
    Page = await PageLoader(
      props.variation,
      locals.pageType ? locals.pageType : "",
      locals.cvars.cvars,
      locals.product.settings,
      props,
      locals.cvars.variation,
    );
  } catch (e) {
    Log.Error("hostname", "error in page loader", {
      error: String(e),
      product_key: locals.product?.product_key,
      variation: locals.urlVariation
        ? locals.urlVariation
        : locals.cvars.variation,
      pageType: locals.pageType ? locals.pageType : "",
      cvars: locals.cvars.cvars,
      product_settings: locals.product?.settings,
      props,
    });

    // default variation
    Page = defaultPage;
    props.cvars = flowDefaults({});
    props.productSettings = SiteDefaults({} as any);
  }
} else {
  // default variation
  Page = defaultPage;
  props.cvars = flowDefaults({});
  props.productSettings = SiteDefaults({} as any);
}
---

{locals.product && <Page {...props} />}
